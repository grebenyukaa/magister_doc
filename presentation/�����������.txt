/слайд 1 - титульный лист/
/слайд 2 - постановка задачи/
    В настоящей работе речь идёт о моделировании физических процессов, описывающихся системами уравнений различных видов, в полярных координатах.
/слайд 3 - актуальность темы/
    Необходимость моделирования подобных процессов возникает в различных областях - моделирование теплозащиты спускаемых аппаратов, газоразрядных ламп высокого давления, электростатики.
    Если испытания сложны и дороги или объект ещё не существует или нужные параметры измерить в эксперименте нельзя, применяется математическое моделирование.
    Часто задача усложняется цилиндрической геометрией моделируемой области.
    Это делает актуальной разработку соответствующего программного обеспечения.
/слайд 4 - цель и задачи/
	Реализация ПО для моделирования процессов, описываемых системами разнородных уравнений, и составляет предмет настоящей работы.
	Программная система должна обеспечивать возможность проведения исследований с достаточной для принятия проектных решений точностью, удобством работы пользователя и приемлемое время расчёта.
/слайд 5 - существующие решения/
    В существующем на рынке математическом ПО средств для решения именно таких задач на данный момент не существует. Отдельные задающие модель уравнения могут быть решены существующими пакетами ПО - например, Матлабом и Вольфрам Математикой, но во-первых для использования их алгоритмов в полярных координатах нужна долгая и сложная доводка, а во-вторых, их методы плохо приспособлены для решения систем разнородных уравнений, тем более с сильной нелинейностью. Кроме того, упомянутые пакеты весьма дороги для коммерческого и научного использования.
/слайд 6 - решение систем разнородных уравнений/
    Для решения системы уравнений разной природы необходимо необходимо определить порядок решения уравнения модели. 
    В общем случае имеет смысл в первую очередь решать уравнения наименее чувствительные к изменениям в итоговом решении системы - но такую оценку может сделать только специалист предметной области, так как она зависит от конкретного физического процесса.
    
    В настоящей работе предлагается организовывать процесс расчёта в виде иерархии вычислительных блоков, соответствующих уравнениям системы.
    Для поддержки нелинейности в решаемых системах расчёт является двухшаговым - сначала в определённом порядке блоки рассчитывают новое приближение решения, после чего происходит фиксация текущего приближения всеми блоками. Блок-схема такого алгоритма для итерационных процессов приведена на рисунке.
/слайд 7 - решаемые виды уравнений/
    Главное достоинство разработанного ПО - возможность управлять процессом расчёта системы уравнений, не углубляясь в тонкости решения отдельных из них.
    Поскольку разработать алгоритмы для решения вообще всех видов различных уравнений - невозможно, было принято решение ограничиться системами: соотношений, алгебраических уравнений, обыкновенных дифференциальных уравнений а также параболических и элиптических дифференциальных уравнений в частных производных, а также добавить возможность расширения ПО новыми типами уравнений.
/слайд 8 - Входные данные/
    Входными данными моделей могут быть как числовые параметры (например, температура внешней среды), так и заданные на расчётной области пространственные распределения (например, начальные условия параболических задач). Также входными данными могут быть таблицы, задающие зависимости между параметрами; такие зависимости требуют интерполяции для их использования. Для обеспечения высокой скорости расчётов построение интерполяций выполнялось рекурсивным алгоритмом, использующим механизм замыканий языка C# и обеспечивающим одновременно гибкость настройки интерполяции и высокую скорость её расчёта.
/слайд 9 - решение параболических и эллиптических уравнений/
    Параболические и эллиптические уравнения, решаемые данным ПО, были ограничены теми, что могут быть представлены в следующей форме. Коэффициенты здесь являются функциями в общем случае от неизвестного, координат и времени. У эллиптических уравнений коэффициент A равен нулю.
    Ввиду схожести уравнений их методы решения были объединены в один.
    Были исследованы различные способы разрешения сингулярности в центральной точке, ...
/слайд 10 - решение параболических и эллиптических уравнений/
    ... и построена консервативная неявная конечно-разностная схема. Особая структура первых строк матрицы обусловлена необходимостью записи особого уравнения для нулевой точки.
/слайд 11 - структура ПО/
    ПО было реализовано в виде набора отдельных утилит, решающих отдельные задачи. Разные утилиты отвечают за редактирование начальных условий, за само моделирование, за визуализацию данных.
    Математические подпрограммы были вынесены в отдельную библиотеку.
/слайд 12 - структура ПО/
    На диаграммах видно декомпозицию работы основной, моделирющей утилиты.
/слайд 13 - вычислительные блоки/
    Модель рассчитываемого процесса состоит из вычислительных блоков. Отдельные блоки соответствуют отдельным уравнениям, либо итерационным процессам.
/слайд 14 - деревья выражений/
    При задании модели пользователь может задать коэффициенты выражениями. 
    Такие выражения разбираются нисходящим рекурсивным парсером и хранятся в виде деревьев выражений.
    Вычисление выражений происходит в контексте вычисления.
    Контекст содержит текущие значения переменных с учётом переопределения и с учётом текущей рассчитываемой точки.
/слайд 15 - пример специфического блока/
    В ходе работ по оптимизации расчёта задач переноса излучения был реализован оптимизированный алгоритм расчёта таких задач в интегральной постановке с применением пакета Nvidia CUDA. В ходе работ была проведена математическая оптимизация задачи, разработан высокопараллельный алгоритм её решения и оптимизированная схема хранения шаблона интегрирования. В текущую работу соответствующий вычислительный блок был добавлен для иллюстрации расширяемости разработанного ПО.
/слайд 16 - написание ПО/
    Разработка велась на языке C#, что ускорило работу благодаря удобству отладки. Для организации отдельных модулей использовался объекто-ориентированный подход. Некоторые алгоритмы были реализованы нативно на C.
/слайд 17 - пользовательский интерфейс/
    Утилита моделирования предоставляет интерфейс командной строки; графический интерфейс имеют утилиты для редактирования начального приближения, для просмотра результатов моделирования и отдельная утилита для запуска расчёта задач.
/слайд 18 - эксперимент - расчёт простых моделей/
    Для проверки отдельных блоков решались простые модели, содержащие только одно уравнение, имеющее аналитическое решение. Отдельные алгоритмы показали отличное совпадение численных решений с аналитическими.
/слайд 19 - эксперимент - расчёт комплексной модели/
    Для демонстрации возможностей ПО было выполнено моделирование реального технического устройства - газоразрядной лампы, модель которой содержит нелинейные обыкновенные дифференциальные уравнения разрядного контура, нелинейное параболическое уравнение теплопереноса, группу эллиптических уравнений задачи переноса излучения и алгебраическое уравнение закона сохранения массы. Диаграмма потоков данных при расчёте значений нового слоя в такой модели приведена на рисунке.
/слайд 20 - эксперимент - расчёт комплексной модели/
    Для проверки ПО были поставлены натурные эксперименты, в которых измерялись электрические и спектрально-энергитические характеристики импульсного источника излучения. Часть данных приведена на рисунке. Видно, что результаты расчёта на средних и поздних стадиях разряда совпадают с экспериментом лучше, чем 7-12%.
/слайд 21 - заключение/
    По итогам работы: был сформулирован подход к расчёту в достаточной степени произвольной математической модели и адаптированы алгоритмы для решения некоторых видов уравнений. С помощью разработанного алгоритма расчёта задачи переноса излучения на видеокарте показана расширяемость разработанного ПО. Был разаботан интерфейс ПО и проведена его апробация.
	При тестировании на комплексной модели газоразрядной лампы ПМО показало удовлетворительное совпадение результатов вычислительного и физического экспериментов, что позволяет рекомендовать его для использования в научных исследованиях.
/слайд 22 - дальнейшие исследования/
    Дальнейшее улучшение ПО возможно по нескольким направлениям: во-первых, увеличение числа видов решаемых уравнений; во-вторых, адаптация методов решения уравнений к произвольной расчётной области; в-третьих, поддержка вычислений на кластерах.